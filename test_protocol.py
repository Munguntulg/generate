#!/usr/bin/env python3
"""
–ü—Ä–æ—Ç–æ–∫–æ–ª “Ø“Ø—Å–≥—ç—Ö —Å–∏—Å—Ç–µ–º–∏–π–≥ —Ç–µ—Å—Ç–ª—ç—Ö —Å–∫—Ä–∏–ø—Ç
"""

import json
import sys
from pathlib import Path

# –õ–æ–∫–∞–ª –º–æ–¥—É–ª–∏—É–¥—ã–≥ import —Ö–∏–π—Ö
sys.path.insert(0, str(Path(__file__).parent))

from app.preprocess import clean_text, extract_entities
from app.summarizer import OllamaSummarizer
from app.action_extractor import ActionItemExtractor
from app.exporter import export_enhanced_protocol
from datetime import date

# –û–ø—Ü–∏–æ–Ω–∞–ª: UDPipe
try:
    from app.nlp_processor import MongolianNLPProcessor
    nlp_processor = MongolianNLPProcessor("mn_model.udpipe")
    print("‚úì UDPipe –º–æ–¥–µ–ª—å –∞—á–∞–∞–ª–∞–≥–¥–ª–∞–∞")
except Exception as e:
    print(f"‚ö† UDPipe –∞—á–∞–∞–ª–∞–≥–¥—Å–∞–Ω–≥“Ø–π: {e}")
    print("  Rule-based extraction –∞—à–∏–≥–ª–∞–Ω–∞")
    nlp_processor = None


def test_with_json_file(json_path: str = "text.json"):
    """
    text.json —Ñ–∞–π–ª–∞–∞—Å —Ç–µ–∫—Å—Ç —É–Ω—à–∏–∂ –ø—Ä–æ—Ç–æ–∫–æ–ª “Ø“Ø—Å–≥—ç—Ö
    """
    print("\n" + "="*60)
    print("–ü–†–û–¢–û–ö–û–õ “Æ“Æ–°–ì–≠–• –°–ò–°–¢–ï–ú –¢–ï–°–¢")
    print("="*60 + "\n")
    
    # 1. JSON —Ñ–∞–π–ª —É–Ω—à–∞—Ö
    print("1Ô∏è‚É£  JSON —Ñ–∞–π–ª —É–Ω—à–∏–∂ –±–∞–π–Ω–∞...")
    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        raw_text = data.get('text', '')
        
        if not raw_text:
            print("‚ùå –¢–µ–∫—Å—Ç —Ö–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞!")
            return
        
        print(f"   ‚úì –ê–Ω—Ö–Ω—ã —Ç–µ–∫—Å—Ç: {len(raw_text)} —Ç—ç–º–¥—ç–≥—Ç")
        print(f"   –≠—Ö–Ω–∏–π 100 —Ç—ç–º–¥—ç–≥—Ç: {raw_text[:100]}...")
        
    except FileNotFoundError:
        print(f"‚ùå {json_path} —Ñ–∞–π–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π!")
        return
    except json.JSONDecodeError as e:
        print(f"‚ùå JSON parsing –∞–ª–¥–∞–∞: {e}")
        return
    
    # 2. –¢–µ–∫—Å—Ç —Ü—ç–≤—ç—Ä–ª—ç—Ö
    print("\n2Ô∏è‚É£  –¢–µ–∫—Å—Ç —Ü—ç–≤—ç—Ä–ª—ç–∂ –±–∞–π–Ω–∞...")
    cleaned_text = clean_text(raw_text)
    print(f"   ‚úì –¶—ç–≤—ç—Ä–ª—ç—Å—ç–Ω —Ç–µ–∫—Å—Ç: {len(cleaned_text)} —Ç—ç–º–¥—ç–≥—Ç")
    print(f"   –≠—Ö–Ω–∏–π 100 —Ç—ç–º–¥—ç–≥—Ç: {cleaned_text[:100]}...")
    
    # 3. –ù—ç—Ä, –±–∞–π–≥—É—É–ª–ª–∞–≥–∞ –∏–ª—Ä“Ø“Ø–ª—ç—Ö
    print("\n3Ô∏è‚É£  –ù—ç—Ä, –±–∞–π–≥—É—É–ª–ª–∞–≥–∞ –∏–ª—Ä“Ø“Ø–ª–∂ –±–∞–π–Ω–∞...")
    
    if nlp_processor:
        try:
            nlp_result = nlp_processor.process_text(cleaned_text)
            entities = nlp_processor.extract_named_entities(nlp_result)
            print(f"   ‚úì UDPipe –∞—à–∏–≥–ª–∞–∂ {len(entities)} –Ω—ç—Ä –æ–ª—Å–æ–Ω")
        except Exception as e:
            print(f"   ‚ö† UDPipe –∞–ª–¥–∞–∞: {e}, rule-based –∞—à–∏–≥–ª–∞–Ω–∞")
            entities = extract_entities(cleaned_text)
    else:
        entities = extract_entities(cleaned_text)
        print(f"   ‚úì Rule-based: {len(entities)} –Ω—ç—Ä –æ–ª—Å–æ–Ω")
    
    print(f"   –û–ª—Å–æ–Ω –Ω—ç—Ä—Å: {', '.join(entities[:10])}")
    
    # 4. SLM –∞—à–∏–≥–ª–∞–Ω –∞–ª–±–∞–Ω —Ö—ç–ª–±—ç—Ä—Ç —Ö”©—Ä–≤“Ø“Ø–ª—ç—Ö
    print("\n4Ô∏è‚É£  –Ø—Ä–∏–∞–Ω—ã —Ö—ç–ª–∏–π–≥ –∞–ª–±–∞–Ω –±–∏—á–≥–∏–π–Ω —Ö—ç–ª —Ä“Ø“Ø —Ö”©—Ä–≤“Ø“Ø–ª–∂ –±–∞–π–Ω–∞...")
    print("   (–≠–Ω—ç —Ö—ç—Å—ç–≥ Ollama-–¥ —Ö–∞–º–∞–∞—Ä—á —É–¥–∞–∞–Ω –±–æ–ª–∂ –º–∞–≥–∞–¥–≥“Ø–π)")
    
    try:
        summarizer = OllamaSummarizer()
        formalized_text = summarizer.formalize_text(cleaned_text)
        
        print(f"   ‚úì –ê–º–∂–∏–ª—Ç—Ç–∞–π —Ö”©—Ä–≤“Ø“Ø–ª–ª—ç—ç: {len(formalized_text)} —Ç—ç–º–¥—ç–≥—Ç")
        print(f"   “Æ—Ä –¥“Ø–Ω–≥–∏–π–Ω —ç—Ö–ª—ç–ª:\n   {formalized_text[:200]}...")
        
    except Exception as e:
        print(f"   ‚ùå Ollama –∞–ª–¥–∞–∞: {e}")
        print("   –¶—ç–≤—ç—Ä–ª—ç—Å—ç–Ω —Ç–µ–∫—Å—Ç–∏–π–≥ —Ö—ç—Ä—ç–≥–ª—ç–Ω—ç")
        formalized_text = cleaned_text
    
    # 5. Action items –≥–∞—Ä–≥–∞—Ö
    print("\n5Ô∏è‚É£  –ê–∂–∏–ª “Ø“Ø—Ä—ç–≥, —à–∏–π–¥–≤—ç—Ä“Ø“Ø–¥–∏–π–≥ –∏–ª—Ä“Ø“Ø–ª–∂ –±–∞–π–Ω–∞...")
    
    try:
        action_extractor = ActionItemExtractor(nlp_processor)
        actions = action_extractor.extract_actions_with_llm(cleaned_text)
        
        print(f"   ‚úì {len(actions)} –∞–∂–∏–ª “Ø“Ø—Ä—ç–≥/—à–∏–π–¥–≤—ç—Ä –æ–ª—Å–æ–Ω")
        
        for i, action in enumerate(actions[:5], 1):
            print(f"   {i}. {action.get('who', '?')}: {action.get('action', '')[:50]}...")
        
        if len(actions) > 5:
            print(f"   ... –±–æ–ª–æ–Ω –±—É—Å–∞–¥ {len(actions) - 5}")
        
    except Exception as e:
        print(f"   ‚ùå Action extraction –∞–ª–¥–∞–∞: {e}")
        actions = []
    
    # 6. –ü—Ä–æ—Ç–æ–∫–æ–ª –±“Ø—Ç—ç—Ü “Ø“Ø—Å–≥—ç—Ö
    print("\n6Ô∏è‚É£  –ü—Ä–æ—Ç–æ–∫–æ–ª –±“Ø—Ç—ç—Ü “Ø“Ø—Å–≥—ç–∂ –±–∞–π–Ω–∞...")
    
    protocol = {
        "title": "–•—É—Ä–ª—ã–Ω –ø—Ä–æ—Ç–æ–∫–æ–ª",
        "date": str(date.today()),
        "participants": entities if entities else ["–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π"],
        "body": formalized_text,
        "action_items": actions,
        "entities": entities,
        "original_text_length": len(raw_text),
        "formalized_text_length": len(formalized_text)
    }
    
    print(f"   ‚úì –ü—Ä–æ—Ç–æ–∫–æ–ª –±—ç–ª—ç–Ω:")
    print(f"      - –ì–∞—Ä—á–∏–≥: {protocol['title']}")
    print(f"      - –û–≥–Ω–æ–æ: {protocol['date']}")
    print(f"      - –û—Ä–æ–ª—Ü–æ–≥—á–∏–¥: {len(protocol['participants'])} —Ö“Ø–Ω")
    print(f"      - –ê–∂–∏–ª “Ø“Ø—Ä—ç–≥: {len(protocol['action_items'])} —à–∏—Ä—Ö—ç–≥")
    
    # 7. DOCX —Ñ–∞–π–ª “Ø“Ø—Å–≥—ç—Ö
    print("\n7Ô∏è‚É£  DOCX —Ñ–∞–π–ª “Ø“Ø—Å–≥—ç–∂ –±–∞–π–Ω–∞...")
    
    try:
        filename = export_enhanced_protocol(protocol)
        print(f"   ‚úì –ê–º–∂–∏–ª—Ç—Ç–∞–π: {filename}")
        
        # –§–∞–π–ª—ã–Ω —Ö—ç–º–∂—ç—ç —à–∞–ª–≥–∞—Ö
        file_size = Path(filename).stat().st_size
        print(f"   –§–∞–π–ª—ã–Ω —Ö—ç–º–∂—ç—ç: {file_size:,} bytes ({file_size/1024:.1f} KB)")
        
    except Exception as e:
        print(f"   ‚ùå DOCX “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        return
    
    # 8. –î“Ø–≥–Ω—ç–ª—Ç
    print("\n" + "="*60)
    print("‚úÖ –¢–ï–°–¢ –ê–ú–ñ–ò–õ–¢–¢–ê–ô –î–£–£–°–õ–ê–ê!")
    print("="*60)
    print(f"\nüìÑ –ü—Ä–æ—Ç–æ–∫–æ–ª —Ñ–∞–π–ª: {filename}")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫:")
    print(f"   - –ê–Ω—Ö–Ω—ã —Ç–µ–∫—Å—Ç: {len(raw_text)} —Ç—ç–º–¥—ç–≥—Ç")
    print(f"   - –ë–æ–ª–æ–≤—Å—Ä—É—É–ª—Å–∞–Ω: {len(formalized_text)} —Ç—ç–º–¥—ç–≥—Ç")
    print(f"   - –û–ª—Å–æ–Ω –Ω—ç—Ä—Å: {len(entities)}")
    print(f"   - –ê–∂–∏–ª “Ø“Ø—Ä—ç–≥: {len(actions)}")
    print("\n")


def test_simple_text():
    """
    –≠–Ω–≥–∏–π–Ω —Ç–µ–∫—Å—Ç –¥—ç—ç—Ä –±–æ–≥–∏–Ω–æ —Ç–µ—Å—Ç
    """
    print("\n" + "="*60)
    print("–≠–ù–ì–ò–ô–ù –¢–ï–ö–°–¢ –¢–ï–°–¢")
    print("="*60 + "\n")
    
    test_text = """
    –ê–Ω–Ω–∞: –ë–∏ —ç–Ω—ç –¥–æ–ª–æ–æ —Ö–æ–Ω–æ–≥—Ç —Ç–∞–π–ª–∞–Ω –±—ç–ª–¥—ç—Ö –±–æ–ª–Ω–æ.
    –ñ–æ–Ω: –ë–∏ —à–∞–ª–≥–∞–∂ “Ø–∑—ç—ç–¥ —Å–∞–Ω–∞–ª ”©–≥–Ω”©.
    –¢–æ–≥—Ç–æ–æ–ª: –ë–∞–∞—Å–∞–Ω –≥–∞—Ä–∞–≥ –±“Ø—Ö –∞–∂–ª—ã–≥ –¥—É—É—Å–≥–∞—Ö.
    """
    
    print(f"–¢–µ—Å—Ç —Ç–µ–∫—Å—Ç:\n{test_text}\n")
    
    # –¶—ç–≤—ç—Ä–ª—ç—Ö
    cleaned = clean_text(test_text)
    print(f"–¶—ç–≤—ç—Ä–ª—ç—Å—ç–Ω: {cleaned}\n")
    
    # –ù—ç—Ä –æ–ª–æ—Ö
    entities = extract_entities(test_text)
    print(f"–û–ª—Å–æ–Ω –Ω—ç—Ä—Å: {entities}\n")
    
    # Action items
    try:
        action_extractor = ActionItemExtractor()
        actions = action_extractor.extract_actions_with_llm(test_text)
        print(f"–û–ª—Å–æ–Ω action items: {len(actions)}")
        for action in actions:
            print(f"  - {action}")
    except Exception as e:
        print(f"Action extraction –∞–ª–¥–∞–∞: {e}")


def show_usage():
    """
    –•—ç—Ä—ç–≥–ª—ç—Ö –∑–∞–∞–≤–∞—Ä
    """
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë           –ú–û–ù–ì–û–õ –ü–†–û–¢–û–ö–û–õ “Æ“Æ–°–ì–≠–• –°–ò–°–¢–ï–ú                       ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

–•—ç—Ä—ç–≥–ª—ç—Ö –∞—Ä–≥–∞:

1. JSON —Ñ–∞–π–ª–∞–∞—Å –ø—Ä–æ—Ç–æ–∫–æ–ª “Ø“Ø—Å–≥—ç—Ö:
   python test_protocol.py text.json

2. –≠–Ω–≥–∏–π–Ω —Ç–µ—Å—Ç –∞–∂–∏–ª–ª—É—É–ª–∞—Ö:
   python test_protocol.py --simple

3. API server —ç—Ö–ª“Ø“Ø–ª—ç—Ö:
   uvicorn app.main:app --reload

4. API —Ç–µ—Å—Ç–ª—ç—Ö (server –∞–∂–∏–ª–ª–∞–∂ –±–∞–π—Ö–∞–¥):
   curl -X POST http://localhost:8000/generate_protocol \\
        -H "Content-Type: application/json" \\
        -d @text.json

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

–®–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π –∑“Ø–π–ª—Å:
‚úì Python 3.8+
‚úì Ollama —Å—É—É–ª–≥–∞—Å–∞–Ω (ollama pull mistral)
‚úì mn_model.udpipe —Ñ–∞–π–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª)
‚úì requirements.txt-–¥ –±–∞–π–≥–∞–∞ —Å–∞–Ω–≥—É—É–¥

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
""")


if __name__ == "__main__":
    if len(sys.argv) > 1:
        arg = sys.argv[1]
        
        if arg in ['-h', '--help', 'help']:
            show_usage()
        elif arg in ['-s', '--simple']:
            test_simple_text()
        else:
            # JSON —Ñ–∞–π–ª—ã–Ω –∑–∞–º –¥–∞–º–∂—É—É–ª—Å–∞–Ω
            test_with_json_file(arg)
    else:
        # Default: text.json –∞—à–∏–≥–ª–∞—Ö
        test_with_json_file("text.json")