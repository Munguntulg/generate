#!/usr/bin/env python3
"""
SLM-ONLY Summarizer - Fallback –±–∞–π—Ö–≥“Ø–π
SLM –∞–∂–∏–ª–ª–∞—Ö–≥“Ø–π –±–æ–ª –∞–ª–¥–∞–∞ –±—É—Ü–∞–∞–Ω–∞
"""

import re
from typing import Dict, Optional

try:
    from ollama import chat
    OLLAMA_AVAILABLE = True
except ImportError:
    OLLAMA_AVAILABLE = False


class SLMOnlySummarizer:
    """
    –ó”©–≤—Ö”©–Ω SLM –∞—à–∏–≥–ª–∞—Ö - fallback –±–∞–π—Ö–≥“Ø–π
    """
    
    def __init__(self, model: str = "qwen2.5:7b"):
        self.model = model
        self.max_chunk_length = 1500
        
        # SLM –±—ç–ª—ç–Ω —ç—Å—ç—Ö —à–∞–ª–≥–∞—Ö
        if not OLLAMA_AVAILABLE:
            raise RuntimeError(
                "‚ùå Ollama —Å—É—É–ª–≥–∞–∞–≥“Ø–π –±–∞–π–Ω–∞!\n"
                "   –°—É—É–ª–≥–∞—Ö: pip install ollama\n"
                "   Model —Ç–∞—Ç–∞—Ö: ollama pull qwen2.5:7b"
            )
        
        # Model –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö —à–∞–ª–≥–∞—Ö
        self._verify_model()
        
        print(f"‚úÖ SLM –±—ç–ª—ç–Ω: {self.model}")
    
    def _verify_model(self):
        """
        Model –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
        """
        try:
            response = chat(
                model=self.model,
                messages=[{'role': 'user', 'content': 'test'}],
                options={'num_predict': 5}
            )
        except Exception as e:
            error_msg = str(e)
            
            if 'not found' in error_msg or '404' in error_msg:
                raise RuntimeError(
                    f"‚ùå Model '{self.model}' –æ–ª–¥—Å–æ–Ω–≥“Ø–π!\n"
                    f"   –¢–∞—Ç–∞—Ö: ollama pull {self.model}\n"
                    f"   –≠—Å–≤—ç–ª ”©”©—Ä model —Å–æ–Ω–≥–æ—Ö:\n"
                    f"   - ollama pull mistral\n"
                    f"   - ollama pull gemma2:9b\n"
                    f"   - ollama pull llama3.2:3b"
                )
            else:
                raise RuntimeError(
                    f"‚ùå Ollama server –∞–∂–∏–ª–ª–∞—Ö–≥“Ø–π –±–∞–π–Ω–∞!\n"
                    f"   –≠—Ö–ª“Ø“Ø–ª—ç—Ö: ollama serve\n"
                    f"   –ê–ª–¥–∞–∞: {error_msg}"
                )
    
    def formalize_text(self, text: str) -> str:
        """
        SLM –∞—à–∏–≥–ª–∞–Ω –∞–ª–±–∞–Ω —Ö—ç–ª –±–æ–ª–≥–æ—Ö
        
        Raises:
            RuntimeError: SLM –∞–∂–∏–ª–ª–∞—Ö–≥“Ø–π –±–æ–ª
        """
        if not OLLAMA_AVAILABLE:
            raise RuntimeError("‚ùå SLM –∞–∂–∏–ª–ª–∞—Ö–≥“Ø–π –±–∞–π–Ω–∞ (Ollama —Å—É—É–ª–≥–∞–∞–≥“Ø–π)")
        
        # –£—Ä—Ç —Ç–µ–∫—Å—Ç –±–æ–ª —Ö—ç—Å—ç–≥–ª—ç–Ω—ç
        if len(text) > self.max_chunk_length:
            return self._process_long_text(text)
        
        system_prompt = """–¢–∞ –ú–æ–Ω–≥–æ–ª —É–ª—Å—ã–Ω –∞–ª–±–∞–Ω —ë—Å–Ω—ã –ø—Ä–æ—Ç–æ–∫–æ–ª –±–∏—á–¥—ç–≥ –º—ç—Ä–≥—ç–∂–∏–ª—Ç—ç–Ω.

üéØ “Æ–ù–î–°–≠–ù –ó–ê–†–ß–ò–ú:
1. –ê–≥—É—É–ª–≥—ã–≥ ”©”©—Ä—á–ª”©—Ö–≥“Ø–π - –∑”©–≤—Ö”©–Ω —Ö—ç–≤ –º–∞—è–≥ –∑–∞—Å–∞—Ö
2. –•“Ø–Ω–∏–π –Ω—ç—Ä, –±–∞–π–≥—É—É–ª–ª–∞–≥–∞, –æ–≥–Ω–æ–æ, —Ç–æ–æ - –Ø–ê–ñ –ë–ê–ô –•–ê–î–ì–ê–õ
3. –•—ç–ª–ª—ç–≥ “Ø–≥—Å–∏–π–≥ –ë“Æ–†–≠–ù –ê–†–ò–õ–ì–ê: –∞–∞, —ç—ç, ”©”©, —à“Ø“Ø –¥—ç—ç, –ª –±–∞–π—Ö –¥–∞–∞, –∑–∞, —Ç—ç–≥—ç—ç–¥, –≥—ç—ç–¥
4. –Ø—Ä–∏–∞–Ω—ã –º–∞—è–≥–∏–π–≥ –∞–ª–±–∞–Ω —ë—Å–Ω—ã –±–∏—á–≥–∏–π–Ω —Ö—ç–ª –±–æ–ª–≥–æ—Ö

üìã –•–£–í–ò–†–ì–ê–õ–¢–´–ù –î“Æ–†–≠–ú:
- "–ë–∏ —Ö–∏–π–Ω—ç" ‚Üí "[–ù—ç—Ä] —Ö–∞—Ä–∏—É—Ü–∞–Ω –≥“Ø–π—Ü—ç—Ç–≥—ç–Ω—ç"
- "—Ö—ç–ª–ª—ç—ç" ‚Üí "–¥—ç–≤—à“Ø“Ø–ª—ç–≤"
- "–±–æ–¥–æ–∂ –±–∞–π–Ω–∞" ‚Üí "“Ø–∑—ç–∂ –±–∞–π–Ω–∞"
- "–±–æ–ª–Ω–æ" ‚Üí "–±–æ–ª–æ—Ö"
- "—à“Ø“Ø –¥—ç—ç", "–ª –±–∞–π—Ö –¥–∞–∞" ‚Üí —É—Å—Ç–≥–∞—Ö
- "–¢—ç–≥–≤—ç–ª", "–ó–∞" ‚Üí —É—Å—Ç–≥–∞—Ö

‚ö†Ô∏è –ß–£–•–ê–õ: 
- –ê–Ω–≥–ª–∏ —Ö—ç–ª —Ä“Ø“Ø –û–†–ß–£–£–õ–ê–•–ì“Æ–ô
- –ù—ç–º—ç–ª—Ç —Ç–∞–π–ª–±–∞—Ä –ë–ò–ß–ò–•–ì“Æ–ô
- –ó”©–≤—Ö”©–Ω –ú–æ–Ω–≥–æ–ª —Ö—ç–ª—ç—ç—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª –±–∏—á

–ñ–ò–®–≠–≠:
–ê–Ω—Ö–Ω—ã: "–ê–Ω–Ω–∞: –ë–∏ —ç–Ω—ç –∞–∂–ª—ã–≥ –¥–∞–≤–∞–∞ –≥–∞—Ä–∞–≥—Ç —Ö–∏–π—Ö –±–æ–ª–Ω–æ —à“Ø“Ø –¥—ç—ç."
–ü—Ä–æ—Ç–æ–∫–æ–ª: "–ê.–ê–Ω–Ω–∞ –¥–∞–≤–∞–∞ –≥–∞—Ä–∞–≥—Ç –∞–∂–ª—ã–≥ —Ö–∞—Ä–∏—É—Ü–∞–Ω –≥“Ø–π—Ü—ç—Ç–≥—ç–Ω—ç."

–ê–Ω—Ö–Ω—ã: "–ó–∞ —Ç—ç–≥—ç—ç–¥ –±–∏–¥ “Ø—Ä–≥—ç–ª–∂–ª“Ø“Ø–ª—å–µ —à“Ø“Ø."
–ü—Ä–æ—Ç–æ–∫–æ–ª: "–•—ç–ª—ç–ª—Ü“Ø“Ø–ª–≥–∏–π–≥ “Ø—Ä–≥—ç–ª–∂–ª“Ø“Ø–ª—ç–≤."

–ê–Ω—Ö–Ω—ã: "–¢–æ–≥—Ç–æ–æ–ª: –ò—Ä—ç—Ö –¥–æ–ª–æ–æ —Ö–æ–Ω–æ–≥—Ç –¥—É—É—Å–≥–∞—Ö."
–ü—Ä–æ—Ç–æ–∫–æ–ª: "–¢–û–ì–¢–°–û–ù: –ò—Ä—ç—Ö –¥–æ–ª–æ–æ —Ö–æ–Ω–æ–≥—Ç –∞–∂–ª—ã–≥ –¥—É—É—Å–≥–∞—Ö–∞–∞—Ä —Ç–æ–≥—Ç–æ–≤."
"""

        user_prompt = f"""–≠–Ω—ç —Ö—É—Ä–ª—ã–Ω —è—Ä–∏–∞–Ω—ã –±–∏—á–ª—ç–≥–∏–π–≥ –∞–ª–±–∞–Ω —ë—Å–Ω—ã –ø—Ä–æ—Ç–æ–∫–æ–ª –±–æ–ª–≥–æ:

{text}

–ó”©–≤—Ö”©–Ω –∞–ª–±–∞–Ω —ë—Å–Ω—ã –ø—Ä–æ—Ç–æ–∫–æ–ª –±–∏—á, –Ω—ç–º—ç–ª—Ç —Ç–∞–π–ª–±–∞—Ä –±–∏—á–∏—Ö–≥“Ø–π."""

        try:
            response = chat(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                options={
                    "temperature": 0.2,
                    "top_p": 0.85,
                    "num_predict": 2000,
                }
            )
            
            result = response["message"]["content"].strip()
            
            # Quality check
            if not self._is_valid_result(text, result):
                raise RuntimeError(
                    f"‚ùå SLM —á–∞–Ω–∞—Ä–≥“Ø–π “Ø—Ä –¥“Ø–Ω –≥–∞—Ä–≥–∞–ª–∞–∞!\n"
                    f"   - –ê–Ω–≥–ª–∏ —Ö—ç–ª –∞—à–∏–≥–ª–∞—Å–∞–Ω —ç—Å–≤—ç–ª\n"
                    f"   - –•—ç—Ç –±–æ–≥–∏–Ω–æ/—É—Ä—Ç “Ø—Ä –¥“Ø–Ω —ç—Å–≤—ç–ª\n"
                    f"   - –•—ç–ª–ª—ç–≥ “Ø–≥—Å “Ø–ª–¥—Å—ç–Ω\n"
                    f"\n   –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–∂ –±–∞–π–Ω–∞..."
                )
            
            return self._post_process(result)
            
        except Exception as e:
            if isinstance(e, RuntimeError):
                raise  # –ú–∞–Ω–∞–π –∞–ª–¥–∞–∞–≥ –¥–∞—Ö–∏–Ω —à–∏–¥—ç—Ö
            else:
                raise RuntimeError(
                    f"‚ùå SLM –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞!\n"
                    f"   Model: {self.model}\n"
                    f"   –ê–ª–¥–∞–∞: {str(e)}\n"
                    f"\n   –®–∞–ª–≥–∞—Ö:\n"
                    f"   1. ollama serve –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö\n"
                    f"   2. Model —Ç–∞—Ç—Å–∞–Ω —ç—Å—ç—Ö: ollama list\n"
                    f"   3. RAM —Ö–∞–Ω–≥–∞–ª—Ç—Ç–∞–π —ç—Å—ç—Ö (8GB+)"
                )
    
    def _is_valid_result(self, original: str, result: str) -> bool:
        """
        SLM “Ø—Ä –¥“Ø–Ω –∑”©–≤ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
        """
        # 1. –•–æ–æ—Å–æ–Ω —ç—Å—ç—Ö
        if len(result.strip()) < 10:
            return False
        
        # 2. –•—ç—Ç –±–æ–≥–∏–Ω–æ —ç—Å–≤—ç–ª —É—Ä—Ç —ç—Å—ç—Ö
        ratio = len(result) / len(original)
        if ratio < 0.2 or ratio > 3.0:
            return False
        
        # 3. –ê–Ω–≥–ª–∏ —Ö—ç–ª —Ö—ç—Ç—ç—Ä—Ö–∏–π –∏—Ö —ç—Å—ç—Ö
        english_chars = len(re.findall(r'[a-zA-Z]', result))
        if english_chars > len(result) * 0.3:
            return False
        
        # 4. –•—ç–ª–ª—ç–≥ “Ø–≥—Å “Ø–ª–¥—Å—ç–Ω —ç—Å—ç—Ö
        bad_fillers = ['—à“Ø“Ø –¥—ç—ç', '–ª –±–∞–π—Ö –¥–∞–∞', '–±–∞–π—Ö–∞–∞', '–∞–∞ –¥—ç—ç']
        if any(filler in result.lower() for filler in bad_fillers):
            return False
        
        return True
    
    def _post_process(self, text: str) -> str:
        """
        –≠—Ü—Å–∏–π–Ω —Ü—ç–≤—ç—Ä–ª—ç–ª—Ç
        """
        # “Æ–ª–¥—Å—ç–Ω —Ö—ç–ª–ª—ç–≥ “Ø–≥—Å
        fillers = [
            '–∞–∞', '—ç—ç', '”©”©', '—é—É', '–≥—ç—ç–¥', '—Ç—ç–≥—ç—ç–¥', '–∑–∞',
            '—Ç—ç–≥—ç—Ö—ç—ç—Ä', '—à“Ø“Ø –¥—ç—ç', '–ª –±–∞–π—Ö', '–±–∞–π—Ö–∞–∞', '–±–∏–∑ –¥—ç—ç'
        ]
        for filler in fillers:
            text = re.sub(r'\b' + re.escape(filler) + r'\b', '', text, flags=re.IGNORECASE)
        
        # –î–∞–≤—Ö–∞—Ä —Ö–æ–æ—Å–æ–Ω –∑–∞–π
        text = re.sub(r'\s+', ' ', text)
        text = re.sub(r'\s+([,.])', r'\1', text)
        
        # ”®–≥“Ø“Ø–ª–±—ç—Ä —ç—Ö–Ω–∏–π “Ø—Å—ç–≥ —Ç–æ–º
        lines = text.split('\n')
        formatted_lines = []
        for line in lines:
            line = line.strip()
            if line and len(line) > 0:
                line = line[0].upper() + line[1:] if len(line) > 1 else line.upper()
            formatted_lines.append(line)
        
        return '\n'.join(formatted_lines).strip()
    
    def _process_long_text(self, text: str) -> str:
        """
        –£—Ä—Ç —Ç–µ–∫—Å—Ç–∏–π–≥ —Ö—ç—Å—ç–≥–ª—ç—Ö
        """
        sentences = [s.strip() for s in text.split('.') if len(s.strip()) > 20]
        
        chunks = []
        current_chunk = ""
        
        for sentence in sentences:
            if len(current_chunk) + len(sentence) < self.max_chunk_length:
                current_chunk += sentence + ". "
            else:
                if current_chunk:
                    chunks.append(current_chunk.strip())
                current_chunk = sentence + ". "
        
        if current_chunk:
            chunks.append(current_chunk.strip())
        
        formalized_chunks = []
        for i, chunk in enumerate(chunks):
            print(f"   –•—ç—Å—ç–≥ {i+1}/{len(chunks)} –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∂ –±–∞–π–Ω–∞...")
            try:
                formalized = self.formalize_text(chunk)
                formalized_chunks.append(formalized)
            except RuntimeError as e:
                raise RuntimeError(
                    f"‚ùå –•—ç—Å—ç–≥ {i+1}/{len(chunks)} –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∂ —á–∞–¥—Å–∞–Ω–≥“Ø–π!\n{str(e)}"
                )
        
        return "\n\n".join(formalized_chunks)


# ============================================
# –¢–ï–°–¢–õ–≠–• –ö–û–î
# ============================================

def test_slm_only():
    """
    SLM-only —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–ª—ç—Ö
    """
    print("\n" + "="*60)
    print("SLM-ONLY SUMMARIZER –¢–ï–°–¢")
    print("="*60 + "\n")
    
    try:
        # SLM —ç—Ö–ª“Ø“Ø–ª—ç—Ö (–±—ç–ª—ç–Ω —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞–Ω–∞)
        summarizer = SLMOnlySummarizer(model="qwen2.5:7b")
        
        # –¢–µ—Å—Ç —Ç–µ–∫—Å—Ç
        test_text = """
        –ê–Ω–Ω–∞: –ë–∏ —ç–Ω—ç –∞–∂–ª—ã–≥ –¥–∞–≤–∞–∞ –≥–∞—Ä–∞–≥—Ç —Ö–∏–π—Ö –±–æ–ª–Ω–æ —à“Ø“Ø –¥—ç—ç.
        –ñ–æ–Ω: –ó–∞ —Ç—ç–≥—ç—ç–¥ –±–∏ —à–∞–ª–≥–∞–∂ “Ø–∑—å–µ.
        –¢–æ–≥—Ç–æ–æ–ª: –ò—Ä—ç—Ö –¥–æ–ª–æ–æ —Ö–æ–Ω–æ–≥—Ç –±“Ø—Ö –∞–∂–ª—ã–≥ –¥—É—É—Å–≥–∞—Ö.
        """
        
        print("–ê–Ω—Ö–Ω—ã —Ç–µ–∫—Å—Ç:")
        print(test_text)
        print("\n" + "-"*60 + "\n")
        
        # SLM –∞—à–∏–≥–ª–∞—Ö
        result = summarizer.formalize_text(test_text)
        
        print("‚úÖ SLM “Ø—Ä –¥“Ø–Ω:")
        print(result)
        print("\n" + "="*60 + "\n")
        
        print("‚úÖ –ê–ú–ñ–ò–õ–¢–¢–ê–ô! SLM –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞.\n")
        
    except RuntimeError as e:
        print("\n" + "="*60)
        print("‚ùå –ê–õ–î–ê–ê –ì–ê–†–õ–ê–ê")
        print("="*60)
        print(f"\n{str(e)}\n")
        return False
    
    return True


if __name__ == "__main__":
    test_slm_only()