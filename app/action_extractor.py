#!/usr/bin/env python3
"""
SLM-ONLY Action Extractor - Fallback –±–∞–π—Ö–≥“Ø–π
"""

import json
import re
from typing import List, Dict

try:
    from ollama import chat
    OLLAMA_AVAILABLE = True
except ImportError:
    OLLAMA_AVAILABLE = False


class SLMOnlyActionExtractor:
    """
    –ó”©–≤—Ö”©–Ω SLM –∞—à–∏–≥–ª–∞—Ö action extractor
    """
    
    def __init__(self, nlp_processor=None):
        self.nlp = nlp_processor
        self.model = "qwen2.5:7b"
        
        # SLM –±—ç–ª—ç–Ω —ç—Å—ç—Ö —à–∞–ª–≥–∞—Ö
        if not OLLAMA_AVAILABLE:
            raise RuntimeError(
                "‚ùå Ollama —Å—É—É–ª–≥–∞–∞–≥“Ø–π –±–∞–π–Ω–∞!\n"
                "   –°—É—É–ª–≥–∞—Ö: pip install ollama"
            )
        
        print(f"‚úÖ Action Extractor –±—ç–ª—ç–Ω: {self.model}")
    
    def extract_actions_with_llm(self, text: str) -> List[Dict]:
        """
        SLM –∞—à–∏–≥–ª–∞–Ω action items –≥–∞—Ä–≥–∞—Ö
        
        Raises:
            RuntimeError: SLM –∞–∂–∏–ª–ª–∞—Ö–≥“Ø–π –±–æ–ª
        """
        if not OLLAMA_AVAILABLE:
            raise RuntimeError("‚ùå SLM –∞–∂–∏–ª–ª–∞—Ö–≥“Ø–π –±–∞–π–Ω–∞ (Ollama —Å—É—É–ª–≥–∞–∞–≥“Ø–π)")
        
        system_prompt = """–¢–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–æ—Å –∞–∂–∏–ª “Ø“Ø—Ä—ç–≥, —à–∏–π–¥–≤—ç—Ä –≥–∞—Ä–≥–∞–¥–∞–≥ –º—ç—Ä–≥—ç–∂–∏–ª—Ç—ç–Ω.

üéØ –û–õ–û–• –ó“Æ–ô–õ–°:
1. –•–≠–ù - –•–∞—Ä–∏—É—Ü–∞–≥—á (–Ω—ç—Ä)
2. –Æ–£ - –•–∏–π—Ö –∞–∂–∏–ª
3. –•–≠–ó–≠–≠ - –•—É–≥–∞—Ü–∞–∞ (–¥–∞–≤–∞–∞ –≥–∞—Ä–∞–≥, –∏—Ä—ç—Ö –¥–æ–ª–æ–æ —Ö–æ–Ω–æ–≥ –≥—ç—Ö –º—ç—Ç)
4. –¢”®–†”®–õ - "action" —ç—Å–≤—ç–ª "decision"

üìã JSON –§–û–†–ú–ê–¢ (–ó”®–í–•”®–ù –≠–ù–≠):
[
    {
        "who": "–•–∞—Ä–∏—É—Ü–∞–≥—á –Ω—ç—Ä",
        "action": "–•–∏–π—Ö –∞–∂–ª—ã–Ω —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ–ª—Ç",
        "due": "–•—É–≥–∞—Ü–∞–∞ –±—É—é—É '–•—É–≥–∞—Ü–∞–∞ –∑–∞–∞–≥–∞–∞–≥“Ø–π'",
        "type": "action —ç—Å–≤—ç–ª decision",
        "confidence": 0.8
    }
]

–ñ–ò–®–≠–≠:

–¢–µ–∫—Å—Ç: "–ê–Ω–Ω–∞: –ë–∏ draft –¥–∞–≤–∞–∞ –≥–∞—Ä–∞–≥—Ç –∏–ª–≥—ç—ç–Ω—ç."
JSON:
[{"who": "–ê–Ω–Ω–∞", "action": "draft –∏–ª–≥—ç—ç—Ö", "due": "–¥–∞–≤–∞–∞ –≥–∞—Ä–∞–≥", "type": "action", "confidence": 0.9}]

–¢–µ–∫—Å—Ç: "–¢–æ–≥—Ç–æ–æ–ª: –ò—Ä—ç—Ö –¥–æ–ª–æ–æ —Ö–æ–Ω–æ–≥—Ç –¥—É—É—Å–≥–∞—Ö."
JSON:
[{"who": "–•—É—Ä–ª—ã–Ω —à–∏–π–¥–≤—ç—Ä", "action": "–ê–∂–ª—ã–≥ –¥—É—É—Å–≥–∞—Ö", "due": "–∏—Ä—ç—Ö –¥–æ–ª–æ–æ —Ö–æ–Ω–æ–≥", "type": "decision", "confidence": 0.95}]

‚ö†Ô∏è –ß–£–•–ê–õ:
- –ó”©–≤—Ö”©–Ω JSON array –±—É—Ü–∞–∞
- –¢–æ–¥–æ—Ä—Ö–æ–π —Ö–∞—Ä–∏—É—Ü–∞–≥—á, –∞–∂–∏–ª –±–∞–π—Ö–≥“Ø–π –±–æ–ª –û–†–•–ò
- "–¢–æ–≥—Ç–æ–æ–ª:", "–®–∏–π–¥–≤—ç—Ä:" ‚Üí type: "decision"
- –ê–Ω–≥–ª–∏ —Ö—ç–ª –∞—à–∏–≥–ª–∞—Ö–≥“Ø–π
- –ù—ç–º—ç–ª—Ç —Ç–∞–π–ª–±–∞—Ä –±–∏—á–∏—Ö–≥“Ø–π"""

        user_prompt = f"""–≠–Ω—ç –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–æ—Å –∞–∂–∏–ª “Ø“Ø—Ä—ç–≥, —à–∏–π–¥–≤—ç—Ä –≥–∞—Ä–≥–∞:

{text}

–ó”©–≤—Ö”©–Ω JSON array –±—É—Ü–∞–∞."""

        try:
            response = chat(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                options={
                    "temperature": 0.2,
                }
            )
            
            content = response["message"]["content"].strip()
            
            # JSON –≥–∞—Ä–≥–∞–∂ –∞–≤–∞—Ö
            json_match = re.search(r'\[.*\]', content, re.DOTALL)
            if not json_match:
                raise RuntimeError(
                    f"‚ùå SLM JSON –±—É—Ü–∞–∞–≥–∞–∞–≥“Ø–π!\n"
                    f"   “Æ—Ä –¥“Ø–Ω: {content[:200]}...\n"
                    f"   JSON —Ñ–æ—Ä–º–∞—Ç —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π"
                )
            
            try:
                actions = json.loads(json_match.group())
            except json.JSONDecodeError as e:
                raise RuntimeError(
                    f"‚ùå JSON parsing –∞–ª–¥–∞–∞!\n"
                    f"   –ê–ª–¥–∞–∞: {str(e)}\n"
                    f"   SLM “Ø—Ä –¥“Ø–Ω: {json_match.group()[:200]}..."
                )
            
            # Validation
            validated_actions = []
            for action in actions:
                if self._validate_action(action):
                    validated_actions.append(action)
                else:
                    print(f"   ‚ö†Ô∏è  –ë—É—Ä—É—É –±“Ø—Ç—ç—Ü—Ç—ç–π action –∞–ª–≥–∞—Å—Å–∞–Ω: {action}")
            
            if not validated_actions:
                raise RuntimeError(
                    f"‚ùå –ó”©–≤ action –æ–ª–¥—Å–æ–Ω–≥“Ø–π!\n"
                    f"   SLM {len(actions)} action –±—É—Ü–∞–∞—Å–∞–Ω –±–æ–ª–æ–≤—á\n"
                    f"   –±“Ø–≥–¥ –±—É—Ä—É—É –±“Ø—Ç—ç—Ü—Ç—ç–π –±–∞–π–Ω–∞"
                )
            
            print(f"   ‚úÖ SLM: {len(validated_actions)} action –æ–ª—Å–æ–Ω")
            return validated_actions
            
        except json.JSONDecodeError as e:
            raise RuntimeError(
                f"‚ùå JSON parsing –∞–ª–¥–∞–∞!\n"
                f"   {str(e)}"
            )
        except Exception as e:
            if isinstance(e, RuntimeError):
                raise  # –ú–∞–Ω–∞–π –∞–ª–¥–∞–∞–≥ –¥–∞—Ö–∏–Ω —à–∏–¥—ç—Ö
            else:
                raise RuntimeError(
                    f"‚ùå Action extraction –∞–ª–¥–∞–∞!\n"
                    f"   Model: {self.model}\n"
                    f"   –ê–ª–¥–∞–∞: {str(e)}"
                )
    
    def _validate_action(self, action: Dict) -> bool:
        """
        Action item –∑”©–≤ –±“Ø—Ç—ç—Ü—Ç—ç–π —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
        """
        required_fields = ["who", "action"]
        
        # –®–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π —Ç–∞–ª–±–∞—Ä—É—É–¥ –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö
        for field in required_fields:
            if field not in action or not action[field]:
                return False
        
        # –£—Ç–≥–∞ —Ö–æ–æ—Å–æ–Ω –±–∏—à —ç—Å—ç—Ö
        if len(action["who"].strip()) < 2 or len(action["action"].strip()) < 5:
            return False
        
        return True
    
    def extract_action_summary(self, actions: List[Dict]) -> Dict:
        """
        Action items-–∏–π–Ω —Ç–æ–≤—á —Ç–∞–π–ª–∞–Ω
        """
        summary = {
            "total_actions": len(actions),
            "by_type": {},
            "by_person": {},
            "with_deadline": 0,
            "without_deadline": 0
        }
        
        for action in actions:
            # –¢”©—Ä–ª”©”©—Ä
            action_type = action.get("type", "unknown")
            summary["by_type"][action_type] = summary["by_type"].get(action_type, 0) + 1
            
            # –•“Ø–Ω—ç—ç—Ä
            who = action.get("who", "Unknown")
            summary["by_person"][who] = summary["by_person"].get(who, 0) + 1
            
            # –•—É–≥–∞—Ü–∞–∞—Ç–∞–π —ç—Å—ç—Ö
            due = action.get("due", "")
            if due and due != "–•—É–≥–∞—Ü–∞–∞ –∑–∞–∞–≥–∞–∞–≥“Ø–π" and due != "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π":
                summary["with_deadline"] += 1
            else:
                summary["without_deadline"] += 1
        
        return summary


# ============================================
# –¢–ï–°–¢–õ–≠–• –ö–û–î
# ============================================

def test_slm_action_extractor():
    """
    Action extractor —Ç–µ—Å—Ç–ª—ç—Ö
    """
    print("\n" + "="*60)
    print("SLM-ONLY ACTION EXTRACTOR –¢–ï–°–¢")
    print("="*60 + "\n")
    
    try:
        extractor = SLMOnlyActionExtractor()
        
        test_text = """
        –ê–Ω–Ω–∞: –ë–∏ draft –¥–∞–≤–∞–∞ –≥–∞—Ä–∞–≥—Ç –∏–ª–≥—ç—ç–Ω—ç.
        –ñ–æ–Ω: –ë–∏ review —Ö–∏–π–∂ —Å—ç—Ç–≥—ç–≥–¥—ç–ª ”©–≥–Ω”©.
        –¢–æ–≥—Ç–æ–æ–ª: –ò—Ä—ç—Ö –¥–æ–ª–æ–æ —Ö–æ–Ω–æ–≥—Ç —ç—Ü—Å–∏–π–Ω —Ö—É–≤–∏–ª–±–∞—Ä—ã–≥ –∏–ª–≥—ç—ç—Ö.
        """
        
        print("–ê–Ω—Ö–Ω—ã —Ç–µ–∫—Å—Ç:")
        print(test_text)
        print("\n" + "-"*60 + "\n")
        
        actions = extractor.extract_actions_with_llm(test_text)
        
        print("‚úÖ –û–ª—Å–æ–Ω action items:\n")
        for i, action in enumerate(actions, 1):
            print(f"{i}. {action['who']}: {action['action']}")
            print(f"   –•—É–≥–∞—Ü–∞–∞: {action.get('due', '–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π')}")
            print(f"   –¢”©—Ä”©–ª: {action.get('type', 'unknown')}")
            print()
        
        # Summary
        summary = extractor.extract_action_summary(actions)
        print("-"*60)
        print(f"–ù–∏–π—Ç: {summary['total_actions']} –∞–∂–∏–ª “Ø“Ø—Ä—ç–≥")
        print(f"–¢”©—Ä”©–ª: {summary['by_type']}")
        print(f"–•—É–≥–∞—Ü–∞–∞—Ç–∞–π: {summary['with_deadline']}, "
              f"–•—É–≥–∞—Ü–∞–∞–≥“Ø–π: {summary['without_deadline']}")
        
        print("\n" + "="*60)
        print("‚úÖ –ê–ú–ñ–ò–õ–¢–¢–ê–ô!")
        print("="*60 + "\n")
        
    except RuntimeError as e:
        print("\n" + "="*60)
        print("‚ùå –ê–õ–î–ê–ê –ì–ê–†–õ–ê–ê")
        print("="*60)
        print(f"\n{str(e)}\n")
        return False
    
    return True


if __name__ == "__main__":
    test_slm_action_extractor()